syntax = "proto2";

package openbase.type.domotic.action;

import "openbase/type/domotic/action/ActionInitiator.proto";
import "openbase/type/domotic/service/ServiceStateDescription.proto";
import "openbase/type/timing/Timestamp.proto";
import "openbase/type/domotic/action/ActionPriority.proto";
import "openbase/type/domotic/action/ActionEmphasis.proto";

option java_package = "org.openbase.type.domotic.action";
option java_outer_classname = "ActionReferenceType";


/**
 * Description of a reference to another action which is a cause of this one.
 *
 * @author Marian Pohling <mpohling@cit-ec.uni-bielefeld.de>
 * @author Tamino Huxohl <thuxohl@techfak.uni-bielefeld.de>
 */
message ActionReference {

    /**
     * The id of the action referenced.
     */
    optional string action_id = 10;

    /**
     * The authority of the referenced action.
     */
    optional .openbase.type.domotic.action.ActionInitiator action_initiator = 20;

    /**
     * The state applied by the referenced action.
     */
    optional .openbase.type.domotic.service.ServiceStateDescription service_state_description = 30;

    /**
     * Flag defines if this action is an intermediary element in the action chain.
     * If the action is intermediary, they will never be scheduled or its action state updated.
     * The actions on the action_impact list can be observed to determine the process of an intermediary action.
     */
    optional bool intermediary = 35;

    /**
     * The runtime period of the referenced action in microseconds. If an action has not specified a runtime
     * the action causes will be searched for this value.
     */
    optional uint64 execution_time_period = 40;

    /**
     * The execution priority of this action used for the action ranking.
     *
     * Note: Default priority is NORMAL
     */
    optional .openbase.type.domotic.action.ActionPriority.Priority priority = 50 [default = NORMAL];

    /**
     * The emphasis categories representing the optimization intention of this action used for the ranking.
     */
    repeated .openbase.type.domotic.action.ActionEmphasis.Category category = 60;

    /**
     * Flag defines if the action execution can be continued after interruption.
     * This means if this action was relegated by another one, it is directly rejected and whill not be scheduled again.
     */
    optional bool interruptible = 70 [default = true];

    /**
     * Flag defines if this action supports it, to be scheduled.
     * If not than the action will directly rejected in case a currently higher ranked action is blocking the unit.
     */
    optional bool schedulable = 80 [default = true];

    /**
     * The time when this action was created.
     */
    optional .openbase.type.timing.Timestamp timestamp = 90;
}

