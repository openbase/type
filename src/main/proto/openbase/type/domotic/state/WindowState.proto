syntax = "proto2";

package openbase.type.domotic.state;

import "openbase/type/timing/Timestamp.proto";
import "openbase/type/domotic/action/ActionDescription.proto";
import "openbase/type/domotic/database/DatabaseQuery.proto";


option java_package = "org.openbase.type.domotic.state";
option java_outer_classname = "WindowStateType";

/**
 * State describing the state of a window.
 *
 * @author Tamino Huxohl <thuxohl@techfak.uni-bielefeld.de>
 */
message WindowState {

    /**
     * The state definitions.
     */
    enum State {

        /**
         * Unknown state.
         */
        UNKNOWN = 0;

        /**
         * Closed state.
         */
        CLOSED = 1;

        /**
         * Open state.
         */
        OPEN = 2;

        /**
         * Tilted state.
         */
        TILTED = 3;
    }

    message WindowStateAverage {

        optional double UNKNOWN = 1;
        optional double CLOSED = 2;
        optional double OPEN = 3;
        optional double TILTED = 4;

        optional .openbase.type.domotic.database.DatabaseQuery query = 400;

    }

    repeated WindowStateAverage average = 500;

    /**
     * The open, closed or tilted state.
     */
    optional State value = 100;

    /**
     * Map entry for a mapping from state values onto there last occurrence.
     * This message has been introduced because of the missing map feature in protobuf 2.
     */
    message MapFieldEntry {

        /**
         * The state value.
         */
        optional State key = 1;

        /**
         * The timestamp of the last occurrence.
         */
        optional .openbase.type.timing.Timestamp value = 2;
    }

    /**
     * A mapping of all state values onto there last occurrence.
     * This mapping can be used for detecting state transitions.
     */
    repeated MapFieldEntry last_value_occurrence = 1000;

    /**
     * Timestamp of the occurency of this event.
     */
    optional .openbase.type.timing.Timestamp timestamp = 300;

    /**
     * This field contains the description of the action which is responsible for this service state.
     */
    optional .openbase.type.domotic.action.ActionDescription responsible_action = 400;
}

