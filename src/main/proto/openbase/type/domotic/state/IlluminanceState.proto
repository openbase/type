syntax = "proto2";

package openbase.type.domotic.state;

import "openbase/type/timing/Timestamp.proto";
import "openbase/type/domotic/action/ActionDescription.proto";


option java_package = "org.openbase.type.domotic.state";
option java_outer_classname = "IlluminanceStateType";


/**
 * Basic sensor or object state.
 * Used by units like sensors which measure the brightness.
 *
 * @author Tamino Huxohl <thuxohl@techfak.uni-bielefeld.de>
 */
message IlluminanceState {

    /**
    * The state definitions.
    */
    enum State {

        /**
         * Unknwon state.
         */
        UNKNOWN = 0;

        /**
         * Ok state.
         */
        SUNNY = 1;

        /**
         * Critical state.
         */
        SHADY = 2;

        /**
         * Critical state.
         */
        DUSKY = 3;

        /**
         * Critical state.
         */
        DARK = 4;
    }

    /**
     * The date unit of the illuminance value.
     */
    enum DataUnit {

        /**
         * Physical unit lux.
         */
        LUX = 1;
    }

    /**
     * The discrete illuminance state.
     */
    optional State value = 50;

    /**
     * The measured brightness in lux for sensors.
     */
    optional double illuminance = 100;

    /**
     * The data unit of the give brightness value.
     */
    optional DataUnit illuminance_data_unit = 200 [default = LUX];

    /**
     * Timestamp of the occurrence of this event.
     */
    optional .openbase.type.timing.Timestamp timestamp = 300;

    /**
     * This field contains the description of the action which is responsible for this service state.
     */
    optional .openbase.type.domotic.action.ActionDescription responsible_action = 400;

    /**
   * Map entry for a mapping from state values onto there last occurrence.
   * This message has been introduced because of the missing map feature in protobuf 2.
   */
    message MapFieldEntry {

        /**
         * The state value.
         */
        optional State key = 1;

        /**
         * The timestamp of the last occurrence.
         */
        optional .openbase.type.timing.Timestamp value = 2;
    }

    /**
     * A mapping of all state values onto there last occurrence.
     * This mapping can be used for detecting state transitions.
     */
    repeated MapFieldEntry last_value_occurrence = 1000;

    message AggregatedValueCoverageMapFieldEntry {

        /**
         * The state value.
         */
        optional State key = 1;

        /**
         * The coverage of the state.
         */
        optional double coverage = 2;
    }

    /**
     * All aggregated average values.
     */
    repeated AggregatedValueCoverageMapFieldEntry aggregated_value_coverage = 500;
}

