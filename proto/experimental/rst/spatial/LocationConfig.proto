package rst.spatial;

option java_outer_classname = "LocationConfigType";

import "rst/rsb/Scope.proto";
import "rst/configuration/MetaConfig.proto";
import "rst/spatial/PlacementConfig.proto";
import "rst/spatial/TileConfig.proto";

/**
 * Description of a Location.
 *
 * @author Tamino Huxohl <thuxohl@techfak.uni-bielefeld.de>
 */
message LocationConfig {

    enum LocationType {

        /**
         * Unknown.
         */
        UNKNOWN = 100;

        /**
         * Type for a zone.
         */
        ZONE = 200;

        /**
         * Type for a region.
         */
        REGION = 300;

        /**
         * Type for a tile.
         */
        TILE = 400;
    }

    /**
     * Id of the location.
     */
    optional string id = 50;

    /**
     * The name of the location.
     */
    optional string label = 100;

    /**
     * The type of the location.
     */
    optional LocationType type = 150;

    /**
     * Flag if this location is a root location.
     */
    optional bool root = 200;

    /**
     * A list of child location ids.
     */
    repeated string child_id = 400;

    /**
     * A list of the available units on this location.
     */
    repeated string unit_id = 450;

    /**
     * The scope of the location.
     */
    optional .rst.rsb.Scope scope = 500;

    /**
     * Placement config.
     */
    optional .rst.spatial.PlacementConfig placement_config = 650;

    /**
     * A field for storing meta unit configurations.
     */
    optional .rst.configuration.MetaConfig meta_config = 700;

    /**
     * The description of the location.
     */
    optional string description = 800;

    /**
     * The tile configuration of the location. Should only be set if the type is tile.
     */
    optional .rst.spatial.TileConfig tile_config = 900;
}

