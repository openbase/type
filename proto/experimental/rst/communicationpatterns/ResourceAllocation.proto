package rst.communicationpatterns;

option java_outer_classname = "ResourceAllocationType";

import "rst/timing/Interval.proto";

/**
 *
 * Data type to allocate resources for exclusive access with a certain priority
 * and estimated duration. Resources can be allocated by specifiyng one or a
 * combination of: resource id (single device), unit or service type
 * (functionality based), or location id.
 * Optionally, an initiator (human or system) and a short description can be
 * specified.
 * @author Patrick Holthaus <patrick.holthaus@uni-bielefeld.de>
 */
message ResourceAllocation {

    /**
      * The state describes the life cycle of a single allocation attempt
      */
    enum State {

        /**
          * Resource requested for allocation in by a client component
          */
        REQUESTED = 10;

        /**
          * Resource allocation scheduled by the server component
          */
        SCHEDULED = 20;

        /**
          * Resource allocation rejected by the server component
          */
        REJECTED = 30;

        /**
          * Resource allocation cancelled (before allocation)
          * by either server or client
          */
        CANCELLED = 40;

        /**
          * Resource is now allocated for the client at the server
          */
        ALLOCATED = 50;

        /**
          * Resource allocation aborted abnormally (during allocation)
          * by either server or client
          */
        ABORTED = 60;

        /**
          * Resource released normally (after allocation)
          * by either server or client
          */
        RELEASED = 70;

    }

    /**
     * Priority ranking scheme for resource allocation when interacting with
     * humans
     */
    enum Priority {

        /**
         * No priority or unspecified; may be dismissed or cancelled at any
         * time; dismiss if resource busy.
         */
        NO = 0;

        /**
         * Interaction not affected or no user interaction; allowed to begin at
         * later times.
         */
        LOW = 1;

        /**
         * Interaction affected non-critically; subsequent interactions only
         * affected marginally; should start immediately
         */
        NORMAL = 2;

        /**
         * Interaction severely affected; has to be be completed to ensure
         * intact communication and common conceptions; start immediately.
         */
        HIGH = 3;

        /**
         * Required for continued interaction or system operation; start
         * immediately
         */
        URGENT = 4;

        /**
         * Human or hardware safety threatened;
         * Begin immediately; divert resources as necessary;
         * overtime may be authorized.
         */
        EMERGENCY = 5;
    }

    /**
     * Specifies the request's initiator
     */
    enum Initiator {

        /**
         * Resource required by a system component
         */
        SYSTEM = 0;

        /**
         * Resource required by a human interaction partner
         */
        HUMAN = 10;
    }

    /**
      * Specifies the requests conflict resolution policy
      */
    enum Policy {

        /**
          * Only allocate as a a single, unmodified interval
          */
        PRESERVE = 0;

        /**
          * Allocate maximum amount of time available, shrink interval if needed
          */
        MAXIMUM = 10;

        /**
          * Allocate the first time slot available, shrink interval if needed
          */
        FIRST = 20;

    }

    /**
     * Identifier of the current resource allocation attempt
     */
    required string id = 10;

    /**
     * Priority of resource allocation
     */
    required State state = 20;

    /**
     * Priority of resource allocation
     */
    required Priority priority = 30;

    /**
     * Initiator of resource allocation
     */
    required Initiator initiator = 40;

    /**
      * The policy
      */
    required Policy policy = 50;

    /**
     * Expected starting point and end of resource allocation
     */
    required .rst.timing.Interval slot = 60;

    /**
     * Expected starting point and end of resource allocation
     */
    optional .rst.timing.Interval constraints = 70;

    /**
     * A description or reason for allocating resources
     */
    repeated string resource_ids = 80;

    /**
     * A description or reason for allocating resources
     */
    optional string description = 90;
}

