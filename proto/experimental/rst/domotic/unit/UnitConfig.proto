package rst.domotic.unit;

option java_outer_classname = "UnitConfigType";

import "rst/spatial/PlacementConfig.proto";
import "rst/rsb/Scope.proto";
import "rst/domotic/service/ServiceConfig.proto";
import "rst/domotic/unit/UnitTemplate.proto";
import "rst/configuration/MetaConfig.proto";
import "rst/domotic/authentication/PermissionConfig.proto";
import "rst/domotic/state/EnablingState.proto";
import "rst/domotic/unit/scene/SceneConfig.proto";
import "rst/domotic/unit/agent/AgentConfig.proto";
import "rst/domotic/unit/app/AppConfig.proto";
import "rst/domotic/unit/device/DeviceConfig.proto";
import "rst/domotic/unit/unitgroup/UnitGroupConfig.proto";
import "rst/domotic/unit/location/LocationConfig.proto";
import "rst/domotic/unit/connection/ConnectionConfig.proto";
import "rst/domotic/unit/user/UserConfig.proto";
import "rst/domotic/unit/object/ObjectConfig.proto";
import "rst/domotic/unit/authorizationgroup/AuthorizationGroupConfig.proto";


/**
 * Description of a unit configuration.
 *
 * @author Tamino Huxohl <thuxohl@techfak.uni-bielefeld.de>
 */
message UnitConfig {

    /**
     * The id of the unit.
     */
    optional string id = 50;

    /**
     * The id of the unit template config this unit implements.
     */
    optional string unit_template_config_id = 70;

    /**
     * The label of the unit.
     */
    optional string label = 100;

    /**
     * A list of aliases linked to this unit. Can be used to identify the unit in a human readable way.
     */
    repeated string alias = 110;

    /**
     * The id of the unit that intoduced this unit.
     * Is the id of the unit itself if it is the unit host.
     */
    optional string unit_host_id = 120;

    /**
     * The unit type.
     * TODO: BCO 2.0 rename this field into unit_type
     */
    optional .rst.domotic.unit.UnitTemplate.UnitType type = 150;

    /**
     * The placement of the unit.
     */
    optional .rst.spatial.PlacementConfig placement_config = 200;

    /**
     * The scope of the unit.
     */
    optional .rst.rsb.Scope scope = 300;

    /**
     * The description of the unit.
     */
    optional string description = 500;

    /**
     * Flag determining whether the unit is bound to its host unit keeps the same location.
     */
    optional bool bound_to_unit_host = 550;

    /**
     * A list of service configurations.
     */
    repeated .rst.domotic.service.ServiceConfig service_config = 600;

    /**
     * A field for storing meta unit configurations.
     */
    optional .rst.configuration.MetaConfig meta_config = 700;

    /**
     * The state if the unit is enabled for the system.
     */
    optional .rst.domotic.state.EnablingState enabling_state = 750;

    /**
     * Additional configuration field. Is only set if the type is USER.
     */
    optional .rst.domotic.unit.user.UserConfig user_config = 800;

    /**
     * Additional configuration field. Is only set if the type is AUTHORIZATION_GROUP.
     */
    optional .rst.domotic.unit.authorizationgroup.AuthorizationGroupConfig authorization_group_config = 900;

    /**
     * Additional configuration field. Is only set if the type is AGENT.
     */
    optional .rst.domotic.unit.agent.AgentConfig agent_config = 1000;

    /**
     * Additional configuration field. Is only set if the type is APP.
     */
    optional .rst.domotic.unit.app.AppConfig app_config = 1100;

    /**
     * Additional configuration field. Is only set if the type is SCENE.
     */
    optional .rst.domotic.unit.scene.SceneConfig scene_config = 1200;

    /**
     * Additional configuration field. Is only set if the type is DEVICE.
     */
    optional .rst.domotic.unit.device.DeviceConfig device_config = 1300;

    /**
     * Additional configuration field. Is only set if the type is UNIT_GROUP.
     */
    optional .rst.domotic.unit.unitgroup.UnitGroupConfig unit_group_config = 1400;

    /**
     * Additional configuration field. Is only set if the type is LOCATION.
     */
    optional .rst.domotic.unit.location.LocationConfig location_config = 1500;

    /**
     * Additional configuration field. Is only set if the type is CONNECTION.
     */
    optional .rst.domotic.unit.connection.ConnectionConfig connection_config = 1600;

    /**
     * Additional configuration field. Is only set if the type is OBJECT.
     */
    optional .rst.domotic.unit.object.ObjectConfig object_config = 1800;

    /**
     * Permission configuration for setting user rights for the unit.
     */
    optional .rst.domotic.authentication.PermissionConfig permission_config = 1700;
}

