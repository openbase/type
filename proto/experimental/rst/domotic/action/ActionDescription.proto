package rst.domotic.action;

option java_outer_classname = "ActionDescriptionType";

import "rst/language/Label.proto";
import "rst/language/MultiLanguageText.proto";
import "rst/domotic/state/ActionState.proto";
import "rst/domotic/action/ActionInitiator.proto";
import "rst/domotic/action/ActionReference.proto";
import "rst/domotic/service/ServiceStateDescription.proto";
import "rst/domotic/action/ActionPriority.proto";
import "rst/domotic/action/ActionEmphasis.proto";


/**
 * Description of an action.
 *
 * @author Marian Pohling <mpohling@cit-ec.uni-bielefeld.de>
 * @author Tamino Huxohl <thuxohl@techfak.uni-bielefeld.de>
 */
message ActionDescription {

    /**
     * An id for the action description.
     *
     * Note: Field is auto generated by the controller instance.
     */
    optional string id = 10;

    /**
     * A label for the action description.
     */
    optional .rst.language.Label label = 20;

    /**
     * A description for the action description.
     *
     * Note: Field is auto generated by the controller instance.
     */
    optional .rst.language.MultiLanguageText description = 30;

    /**
     * The initiator of this action.
     */
    optional .rst.domotic.action.ActionInitiator action_initiator = 40;

    /**
     * The execution state of this action.
     *
     * Note: Field is auto generated and updated by the controller instance.
     */
    optional .rst.domotic.state.ActionState action_state = 50;

    /**
     * A list of actions which caused this action.
     */
    repeated .rst.domotic.action.ActionReference action_chain = 60;

    /**
     * The state which this action shall apply.
     */
    optional .rst.domotic.service.ServiceStateDescription service_state_description = 70;

    /**
     * The execution state of this action used for the action ranking.
     *
     * Note: Default priority is NORMAL
     */
    optional .rst.domotic.action.ActionPriority.Priority priority = 80 [default = NORMAL];

    /**
     * The emphasis category representing the optimization intention of this action used for the ranking.
     */
    repeated .rst.domotic.action.ActionEmphasis.Category category = 90;

    /**
     * The defined runtime period of this action in microsecunds.
     * The action will be finished or rejected (if prevously scheduled) after expiration.
     * If set to 0 then the action will only be executed ones if no other action is blocking the unit to avoid state flickering.
     */
    optional uint64 execution_time_period = 100;

    /**
     * Flag defines if an currently scheduled or executing action should be canceled.
     * To perform a cancelation of a running action, only this flag and the id of the action is needed.
     */
    optional bool cancel = 110;

    /**
     * Flag defines if the action execution can be continued after interruption.
     * This means if this action was relegated by another one, it is directly rejected and whill not be scheduled again.
     */
    optional bool interruptible = 120;

    /**
     * Flag defines if this action supports it, to be scheduled.
     * If not than the action will directly rejected in case a currenly higher ranked action is blocking the unit.
     */
    optional bool schedulable = 130;

    /**
     * The time when this action was created.
     */
    optional uint64 creation_time = 140;
}

