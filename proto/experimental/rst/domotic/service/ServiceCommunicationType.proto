package rst.domotic.service;

option java_outer_classname = "ServiceCommunicationTypeType";

/**
 * This type contains an enumeration that contains a value
 * for every state or mode in the domotic package. It is used
 * to map from a service type to the state or mode that is
 * processed by this service.
 *
 * @author Tamino Huxohl <thuxohl@techfak.uni-bielefeld.de>
 * @author Marian Pohling <mpohling@cit-ec.uni-bielefeld.de>
 */
message ServiceCommunicationType {

    /**
     * The communication type containing an entry for every state and mode.
     */
    enum CommunicationType {

        /**
         * Unknown type.
         */
        UNKNOWN = 0;

        /**
         * Type representing the activation state.
         */
        ACTIVATION_STATE = 10;

        /**
         * Type representing the alarm state.
         */
        ALARM_STATE = 20;

        /**
         * Type representing the battery state.
         */
        BATTERY_STATE = 30;

        /**
         * Type representing the blind state.
         */
        BLIND_STATE = 40;

        /**
         * Type representing the brightness state.
         */
        BRIGHTNESS_STATE = 50;

        /**
         * Type representing the button state.
         */
        BUTTON_STATE = 60;

        /**
         * Type representing the color state.
         */
        COLOR_STATE = 70;

        /**
         * Type representing the contact state.
         */
        CONTACT_STATE = 80;

        /**
         * Type representing the door state.
         */
        DOOR_STATE = 90;

        /**
         * Type representing the handle state.
         */
        HANDLE_STATE = 100;

        /**
         * Type representing the illuminance state.
         */
        ILLUMINANCE_STATE = 110;

        /**
         * Type representing the motion state.
         */
        MOTION_STATE = 120;

        /**
         * Type representing the passage state.
         */
        PASSAGE_STATE = 130;

        /**
         * Type representing the power consumption state.
         */
        POWER_CONSUMPTION_STATE = 140;

        /**
         * Type representing the power state.
         */
        POWER_STATE = 150;

        /**
         * Type representing the presence state.
         */
        PRESENCE_STATE = 160;

        /**
         * Type representing the rfid state.
         */
        RFID_STATE = 170;

        /**
         * Type representing the smoke state.
         */
        SMOKE_STATE = 180;

        /**
         * Type representing the standby state.
         */
        STANDBY_STATE = 190;

        /**
         * Type representing the switch state.
         */
        SWITCH_STATE = 200;

        /**
         * Type representing the tamper state.
         */
        TAMPER_STATE = 210;

        /**
         * Type representing the temperature state.
         */
        TEMPERATURE_STATE = 220;

        /**
         * Type representing an activity state.
         */
        ACTIVITY_STATE = 230;

        /**
         * Type representing the activity multi state.
         */
        ACTIVITY_MULTI_STATE = 235;

        /**
         * Type representing the user transit.
         */
        USER_TRANSIT_STATE = 240;

        /**
         * Type representing the user window state.
         */
        WINDOW_STATE = 250;

        /**
         * Emphasis state for configuration of dimensions (comfort,energy,security)
         */
        EMPHASIS_STATE = 260;
    }
}

